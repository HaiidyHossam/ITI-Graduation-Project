
Master_garage2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000b20  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000c4  008000c4  00000c18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000269f  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e62  00000000  00000000  0000358b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001495  00000000  00000000  000043ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  00005884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a2  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000141c  00000000  00000000  0000676a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00007b86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 04 	call	0x83a	; 0x83a <main>
  8a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinValue>:
#include "UTILS.h"
#include "DIO_private.h"
#include "DIO_interface.h" 

void DIO_SetPinValue(u8 port,u8 pin_num,u8 Value){
	if(Value==HIGH){
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	a1 f5       	brne	.+104    	; 0xfe <DIO_SetPinValue+0x6c>
		switch(port){
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	89 f0       	breq	.+34     	; 0xbc <DIO_SetPinValue+0x2a>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_SetPinValue+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_SetPinValue+0x40>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_SetPinValue+0x56>
  a4:	08 95       	ret
			case Port_A:
			SET_BIT(PORTA,pin_num);
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_SetPinValue+0x20>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_SetPinValue+0x1c>
  b6:	82 2b       	or	r24, r18
  b8:	8b bb       	out	0x1b, r24	; 27
			break;
  ba:	08 95       	ret
			case Port_B:
			SET_BIT(PORTB,pin_num);
  bc:	28 b3       	in	r18, 0x18	; 24
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_SetPinValue+0x36>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_SetPinValue+0x32>
  cc:	82 2b       	or	r24, r18
  ce:	88 bb       	out	0x18, r24	; 24
			break;
  d0:	08 95       	ret
			case Port_C:
			SET_BIT(PORTC,pin_num);
  d2:	25 b3       	in	r18, 0x15	; 21
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinValue+0x4c>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinValue+0x48>
  e2:	82 2b       	or	r24, r18
  e4:	85 bb       	out	0x15, r24	; 21
			break;
  e6:	08 95       	ret
			case Port_D:
			SET_BIT(PORTD,pin_num);
  e8:	22 b3       	in	r18, 0x12	; 18
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinValue+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinValue+0x5e>
  f8:	82 2b       	or	r24, r18
  fa:	82 bb       	out	0x12, r24	; 18
			break;
  fc:	08 95       	ret
		}
	}
	else if(Value==LOW){
  fe:	41 11       	cpse	r20, r1
 100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_SetPinValue+0xde>
		switch(port){
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 f0       	breq	.+36     	; 0x12a <DIO_SetPinValue+0x98>
 106:	28 f0       	brcs	.+10     	; 0x112 <DIO_SetPinValue+0x80>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_SetPinValue+0xb0>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	29 f1       	breq	.+74     	; 0x15a <DIO_SetPinValue+0xc8>
 110:	08 95       	ret
			case Port_A:
			CLR_BIT(PORTA,pin_num);
 112:	2b b3       	in	r18, 0x1b	; 27
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinValue+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinValue+0x88>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	8b bb       	out	0x1b, r24	; 27
			break;
 128:	08 95       	ret
			case Port_B:
			CLR_BIT(PORTB,pin_num);
 12a:	28 b3       	in	r18, 0x18	; 24
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinValue+0xa4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinValue+0xa0>
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	88 bb       	out	0x18, r24	; 24
			break;
 140:	08 95       	ret
			case Port_C:
			CLR_BIT(PORTC,pin_num);
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_SetPinValue+0xbc>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_SetPinValue+0xb8>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 bb       	out	0x15, r24	; 21
			break;
 158:	08 95       	ret
			case Port_D:
			CLR_BIT(PORTD,pin_num);
 15a:	22 b3       	in	r18, 0x12	; 18
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPinValue+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPinValue+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	82 bb       	out	0x12, r24	; 18
 170:	08 95       	ret

00000172 <DIO_SetPinDirection>:
		}
	}
}

void DIO_SetPinDirection(u8 port,u8 pin_num,u8 Direction){
if(Direction==output){
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	a1 f5       	brne	.+104    	; 0x1de <DIO_SetPinDirection+0x6c>
	switch(port){
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	89 f0       	breq	.+34     	; 0x19c <DIO_SetPinDirection+0x2a>
 17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_SetPinDirection+0x14>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_SetPinDirection+0x40>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_SetPinDirection+0x56>
 184:	08 95       	ret
		case Port_A:
		SET_BIT(DDRA,pin_num);
 186:	2a b3       	in	r18, 0x1a	; 26
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinDirection+0x20>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinDirection+0x1c>
 196:	82 2b       	or	r24, r18
 198:	8a bb       	out	0x1a, r24	; 26
		break;
 19a:	08 95       	ret
		case Port_B:
		SET_BIT(DDRB,pin_num);
 19c:	27 b3       	in	r18, 0x17	; 23
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinDirection+0x36>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinDirection+0x32>
 1ac:	82 2b       	or	r24, r18
 1ae:	87 bb       	out	0x17, r24	; 23
		break;
 1b0:	08 95       	ret
		case Port_C:
		SET_BIT(DDRC,pin_num);
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinDirection+0x4c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinDirection+0x48>
 1c2:	82 2b       	or	r24, r18
 1c4:	84 bb       	out	0x14, r24	; 20
		break;
 1c6:	08 95       	ret
		case Port_D:
		SET_BIT(DDRD,pin_num);
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinDirection+0x62>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinDirection+0x5e>
 1d8:	82 2b       	or	r24, r18
 1da:	81 bb       	out	0x11, r24	; 17
		break;
 1dc:	08 95       	ret
	}
}	
else if(Direction==input){
 1de:	41 11       	cpse	r20, r1
 1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_SetPinDirection+0xde>
switch(port){
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_SetPinDirection+0x98>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_SetPinDirection+0x80>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_SetPinDirection+0xb0>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_SetPinDirection+0xc8>
 1f0:	08 95       	ret
	case Port_A:
	CLR_BIT(DDRA,pin_num);
 1f2:	2a b3       	in	r18, 0x1a	; 26
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinDirection+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinDirection+0x88>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	8a bb       	out	0x1a, r24	; 26
	break;
 208:	08 95       	ret
	case Port_B:
	CLR_BIT(DDRB,pin_num);
 20a:	27 b3       	in	r18, 0x17	; 23
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinDirection+0xa4>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinDirection+0xa0>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	87 bb       	out	0x17, r24	; 23
	break;
 220:	08 95       	ret
	case Port_C:
	CLR_BIT(DDRC,pin_num);
 222:	24 b3       	in	r18, 0x14	; 20
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinDirection+0xbc>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinDirection+0xb8>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	84 bb       	out	0x14, r24	; 20
	break;
 238:	08 95       	ret
	case Port_D:
	CLR_BIT(DDRD,pin_num);
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinDirection+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinDirection+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	81 bb       	out	0x11, r24	; 17
 250:	08 95       	ret

00000252 <DIO_GetPinValue>:
}	
}
}

u8 DIO_GetPinValue(u8 port,u8 pin_num){
	switch(port){
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	79 f0       	breq	.+30     	; 0x274 <DIO_GetPinValue+0x22>
 256:	28 f0       	brcs	.+10     	; 0x262 <DIO_GetPinValue+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_GetPinValue+0x34>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_GetPinValue+0x46>
 260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_GetPinValue+0x58>
		case Port_A:
		return GET_BIT(PINA,pin_num);
 262:	89 b3       	in	r24, 0x19	; 25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_GetPinValue+0x1a>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_GetPinValue+0x16>
 270:	81 70       	andi	r24, 0x01	; 1
 272:	08 95       	ret
		break;
		case Port_B:
		return GET_BIT(PINB,pin_num);
 274:	86 b3       	in	r24, 0x16	; 22
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_GetPinValue+0x2c>
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_GetPinValue+0x28>
 282:	81 70       	andi	r24, 0x01	; 1
 284:	08 95       	ret
		break;
		case Port_C:
		return GET_BIT(PINC,pin_num);
 286:	83 b3       	in	r24, 0x13	; 19
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_GetPinValue+0x3e>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_GetPinValue+0x3a>
 294:	81 70       	andi	r24, 0x01	; 1
 296:	08 95       	ret
		break;
		case Port_D:
		return GET_BIT(PIND,pin_num);
 298:	80 b3       	in	r24, 0x10	; 16
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_GetPinValue+0x50>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_GetPinValue+0x4c>
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	08 95       	ret
		break;
		default:
		break;
		
	}
}
 2aa:	08 95       	ret

000002ac <DIO_SetPortValue>:

void DIO_SetPortValue(u8 port, u8 Value){ //11111111==255
	switch(port){
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <DIO_SetPortValue+0x14>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <DIO_SetPortValue+0x10>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <DIO_SetPortValue+0x18>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <DIO_SetPortValue+0x1c>
 2ba:	08 95       	ret
		case Port_A:
		PORTA=Value;
 2bc:	6b bb       	out	0x1b, r22	; 27
		break;
 2be:	08 95       	ret
		case Port_B:
		PORTB=Value;
 2c0:	68 bb       	out	0x18, r22	; 24
		break;
 2c2:	08 95       	ret
		case Port_C:
		PORTC=Value;
 2c4:	65 bb       	out	0x15, r22	; 21
		break;
 2c6:	08 95       	ret
		case Port_D:
		PORTD=Value;
 2c8:	62 bb       	out	0x12, r22	; 18
 2ca:	08 95       	ret

000002cc <DIO_SetPortDirection>:
		
	}
}

void DIO_SetPortDirection(u8 port, u8 Direction){
	switch(port){
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <DIO_SetPortDirection+0x14>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_SetPortDirection+0x10>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	39 f0       	breq	.+14     	; 0x2e4 <DIO_SetPortDirection+0x18>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <DIO_SetPortDirection+0x1c>
 2da:	08 95       	ret
		case Port_A:
		DDRA=Direction;
 2dc:	6a bb       	out	0x1a, r22	; 26
		break;
 2de:	08 95       	ret
		case Port_B:
		DDRB=Direction;
 2e0:	67 bb       	out	0x17, r22	; 23
		break;
 2e2:	08 95       	ret
		case Port_C:
		DDRC=Direction;
 2e4:	64 bb       	out	0x14, r22	; 20
		break;
 2e6:	08 95       	ret
		case Port_D:
		DDRD=Direction;
 2e8:	61 bb       	out	0x11, r22	; 17
 2ea:	08 95       	ret

000002ec <EEPROM_Write>:
#include "EEPROM_config.h"
#include "I2C_interface.h"
#include "STDTYPE.h"
#include <util/delay.h>
void EEPROM_Write(u8 address,u8 value)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	d8 2f       	mov	r29, r24
 2f2:	c6 2f       	mov	r28, r22
	I2C_VoidStartCondition() ;
 2f4:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_VoidStartCondition>
	I2C_VoidSetSlaveAddress_Operation(EEPROM_ADDRESS,TWI_WRITE) ;
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	81 e5       	ldi	r24, 0x51	; 81
 2fc:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_VoidSetSlaveAddress_Operation>
	I2C_VoidMasterWriteData(address) ;
 300:	8d 2f       	mov	r24, r29
 302:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_VoidMasterWriteData>
	I2C_VoidMasterWriteData(value) ;
 306:	8c 2f       	mov	r24, r28
 308:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_VoidMasterWriteData>
	I2C_VoidMasterStopCondition() ;
 30c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_VoidMasterStopCondition>
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <EEPROM_READ>:
u8  EEPROM_READ (u8 address)
{
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	18 2f       	mov	r17, r24
	u8 ret = 0 ;
 324:	19 82       	std	Y+1, r1	; 0x01
	I2C_VoidStartCondition() ;
 326:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_VoidStartCondition>
	I2C_VoidSetSlaveAddress_Operation(EEPROM_ADDRESS,TWI_WRITE) ;
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	81 e5       	ldi	r24, 0x51	; 81
 32e:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_VoidSetSlaveAddress_Operation>
	I2C_VoidMasterWriteData(address) ;
 332:	81 2f       	mov	r24, r17
 334:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_VoidMasterWriteData>
	I2C_VoidStartCondition() ;
 338:	0e 94 bc 01 	call	0x378	; 0x378 <I2C_VoidStartCondition>
	I2C_VoidSetSlaveAddress_Operation(EEPROM_ADDRESS,TWI_READ) ;
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	81 e5       	ldi	r24, 0x51	; 81
 340:	0e 94 c6 01 	call	0x38c	; 0x38c <I2C_VoidSetSlaveAddress_Operation>
	I2C_VoidMasterReadData(&ret) ;
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_VoidMasterReadData>
	I2C_VoidMasterStopCondition() ;
 34c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_VoidMasterStopCondition>
	return ret ;
}
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	08 95       	ret

0000035c <I2C_VoidInitMaster>:
{
	if(master_address > 0 )
	{
		TWAR = master_address ;
	}
	SET_BIT(TWCR,TWCR_TWEN) ;
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	90 b9       	out	0x00, r25	; 0
 360:	91 b1       	in	r25, 0x01	; 1
 362:	9e 7f       	andi	r25, 0xFE	; 254
 364:	91 b9       	out	0x01, r25	; 1
 366:	91 b1       	in	r25, 0x01	; 1
 368:	9d 7f       	andi	r25, 0xFD	; 253
 36a:	91 b9       	out	0x01, r25	; 1
 36c:	81 11       	cpse	r24, r1
 36e:	82 b9       	out	0x02, r24	; 2
 370:	86 b7       	in	r24, 0x36	; 54
 372:	84 60       	ori	r24, 0x04	; 4
 374:	86 bf       	out	0x36, r24	; 54
 376:	08 95       	ret

00000378 <I2C_VoidStartCondition>:
}
void I2C_VoidStartCondition(void)
{
	/* set start condition */
	SET_BIT(TWCR,TWCR_TWSTA) ;
 378:	86 b7       	in	r24, 0x36	; 54
 37a:	80 62       	ori	r24, 0x20	; 32
 37c:	86 bf       	out	0x36, r24	; 54
	/* start job by clearing TWINT */
	SET_BIT(TWCR,TWCR_TWINT) ;
 37e:	86 b7       	in	r24, 0x36	; 54
 380:	80 68       	ori	r24, 0x80	; 128
 382:	86 bf       	out	0x36, r24	; 54
	/* then twint set by hardware when start condition end */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0 ) ;
 384:	06 b6       	in	r0, 0x36	; 54
 386:	07 fe       	sbrs	r0, 7
 388:	fd cf       	rjmp	.-6      	; 0x384 <I2C_VoidStartCondition+0xc>

	/* clear TWINT again */
	/* SET_PIN(TWCR,TWCR_TWINT) ; */

	/* check */
}
 38a:	08 95       	ret

0000038c <I2C_VoidSetSlaveAddress_Operation>:
void I2C_VoidSetSlaveAddress_Operation(u8 slave_address,u8 operation)
{
	TWDR = ((slave_address<<1) | (operation)) ;
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	86 2b       	or	r24, r22
 394:	83 b9       	out	0x03, r24	; 3
	/* clear start condition -> postponed  */
	   CLR_BIT(TWCR,TWCR_TWSTA) ;
 396:	86 b7       	in	r24, 0x36	; 54
 398:	8f 7d       	andi	r24, 0xDF	; 223
 39a:	86 bf       	out	0x36, r24	; 54
    /* start job by clearing TWINT */
       SET_BIT(TWCR,TWCR_TWINT) ;
 39c:	86 b7       	in	r24, 0x36	; 54
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	86 bf       	out	0x36, r24	; 54
    /* then twint set by hardware when start condition end */
   	   while(GET_BIT(TWCR,TWCR_TWINT) == 0 ) ;
 3a2:	06 b6       	in	r0, 0x36	; 54
 3a4:	07 fe       	sbrs	r0, 7
 3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <I2C_VoidSetSlaveAddress_Operation+0x16>
   	/* check */
}
 3a8:	08 95       	ret

000003aa <I2C_VoidMasterWriteData>:
void I2C_VoidMasterWriteData(u8 copy_U8data)
{
	TWDR = copy_U8data ;
 3aa:	83 b9       	out	0x03, r24	; 3
    /* start job by clearing TWINT */
       SET_BIT(TWCR,TWCR_TWINT) ;
 3ac:	86 b7       	in	r24, 0x36	; 54
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	86 bf       	out	0x36, r24	; 54
    /* then twint set by hardware when start condition end */
   	   while( GET_BIT(TWCR,TWCR_TWINT) == 0 ) ;
 3b2:	06 b6       	in	r0, 0x36	; 54
 3b4:	07 fe       	sbrs	r0, 7
 3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <I2C_VoidMasterWriteData+0x8>
   	   /* check */
}
 3b8:	08 95       	ret

000003ba <I2C_VoidMasterReadData>:
void I2C_VoidMasterReadData(u8 *copy_U8destination)
{
 3ba:	fc 01       	movw	r30, r24
    /* start job by clearing TWINT */
       SET_BIT(TWCR,TWCR_TWINT) ;
 3bc:	96 b7       	in	r25, 0x36	; 54
 3be:	90 68       	ori	r25, 0x80	; 128
 3c0:	96 bf       	out	0x36, r25	; 54
    /* then twint set by hardware when start condition end */
   	   while(GET_BIT(TWCR,TWCR_TWINT) == 0 ) ;
 3c2:	06 b6       	in	r0, 0x36	; 54
 3c4:	07 fe       	sbrs	r0, 7
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <I2C_VoidMasterReadData+0x8>
   	   *copy_U8destination = TWDR ;
 3c8:	83 b1       	in	r24, 0x03	; 3
 3ca:	80 83       	st	Z, r24
 3cc:	08 95       	ret

000003ce <I2C_VoidMasterStopCondition>:
}
void I2C_VoidMasterStopCondition(void)
{
	 SET_BIT(TWCR,TWCR_TWSTO) ;
 3ce:	86 b7       	in	r24, 0x36	; 54
 3d0:	80 61       	ori	r24, 0x10	; 16
 3d2:	86 bf       	out	0x36, r24	; 54
    /* start job by clearing TWINT */
       SET_BIT(TWCR,TWCR_TWINT) ;
 3d4:	86 b7       	in	r24, 0x36	; 54
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	86 bf       	out	0x36, r24	; 54
 3da:	08 95       	ret

000003dc <LCD_Send_Command>:
	}
	// 3awz a5rog mn CGRAm w aro7 ll DDRam 34an a write on LCD
	GOTOXY(Copy_u8XPOS, Copy_u8YPOS);
	// show data of each pattern on the lcd
	LCD_Send_Data(Copy_u8PatternNumber);
}
 3dc:	cf 93       	push	r28
 3de:	c8 2f       	mov	r28, r24
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 3f4:	6c 2f       	mov	r22, r28
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_SetPortValue>
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 406:	8f e6       	ldi	r24, 0x6F	; 111
 408:	97 e1       	ldi	r25, 0x17	; 23
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_Send_Data>:
 420:	cf 93       	push	r28
 422:	c8 2f       	mov	r28, r24
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 438:	6c 2f       	mov	r22, r28
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_SetPortValue>
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 44a:	8f e6       	ldi	r24, 0x6F	; 111
 44c:	97 e1       	ldi	r25, 0x17	; 23
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_Send_Data+0x2e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_Send_Data+0x34>
 454:	00 00       	nop
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	62 e0       	ldi	r22, 0x02	; 2
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <LCD_Init>:
 464:	2f ef       	ldi	r18, 0xFF	; 255
 466:	89 ef       	ldi	r24, 0xF9	; 249
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <LCD_Init+0x6>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_Init+0x10>
 474:	00 00       	nop
 476:	8f e3       	ldi	r24, 0x3F	; 63
 478:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 47c:	2a e6       	ldi	r18, 0x6A	; 106
 47e:	2a 95       	dec	r18
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_Init+0x1a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_Init+0x20>
 484:	8c e0       	ldi	r24, 0x0C	; 12
 486:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 48a:	8a e6       	ldi	r24, 0x6A	; 106
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_Init+0x28>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_Init+0x2e>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_Init+0x38>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_Init+0x3e>
 4a2:	00 00       	nop
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 4aa:	9f ef       	ldi	r25, 0xFF	; 255
 4ac:	29 ef       	ldi	r18, 0xF9	; 249
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	20 40       	sbci	r18, 0x00	; 0
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <LCD_Init+0x4c>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_Init+0x56>
 4ba:	00 00       	nop
 4bc:	08 95       	ret

000004be <GOTOXY>:
 4be:	88 23       	and	r24, r24
 4c0:	29 f0       	breq	.+10     	; 0x4cc <GOTOXY+0xe>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	11 f4       	brne	.+4      	; 0x4ca <GOTOXY+0xc>
 4c6:	60 5c       	subi	r22, 0xC0	; 192
 4c8:	01 c0       	rjmp	.+2      	; 0x4cc <GOTOXY+0xe>
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	86 0f       	add	r24, r22
 4d0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 4d4:	08 95       	ret

000004d6 <LCD_Clear>:
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 4dc:	8f e9       	ldi	r24, 0x9F	; 159
 4de:	9f e0       	ldi	r25, 0x0F	; 15
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_Clear+0xa>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_Clear+0x10>
 4e6:	00 00       	nop
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Send_Command>
 4ee:	08 95       	ret

000004f0 <LCD_String>:
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	8c 01       	movw	r16, r24
 4fa:	c0 e0       	ldi	r28, 0x00	; 0
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <LCD_String+0x16>
 500:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Send_Data>
 504:	21 96       	adiw	r28, 0x01	; 1
 506:	f8 01       	movw	r30, r16
 508:	ec 0f       	add	r30, r28
 50a:	fd 1f       	adc	r31, r29
 50c:	80 81       	ld	r24, Z
 50e:	81 11       	cpse	r24, r1
 510:	f7 cf       	rjmp	.-18     	; 0x500 <LCD_String+0x10>
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	08 95       	ret

0000051c <LCD_printNumber>:

void LCD_printNumber(int num)
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
 524:	2a 97       	sbiw	r28, 0x0a	; 10
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
	u8 str[10];
	itoa(num, str, 10); // here 10 means decimal
 530:	4a e0       	ldi	r20, 0x0A	; 10
 532:	50 e0       	ldi	r21, 0x00	; 0
 534:	be 01       	movw	r22, r28
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <itoa>
	LCD_String(str);
 53e:	ce 01       	movw	r24, r28
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>
}
 546:	2a 96       	adiw	r28, 0x0a	; 10
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <GetData>:
	ENTER,
	X_E
} Status;            // Enum to represent different states

void GetData(u8 State)
{
 558:	cf 93       	push	r28
 55a:	c8 2f       	mov	r28, r24
	input_id = UART_RECEIVE();  // Receive user input ID via UART
 55c:	0e 94 15 05 	call	0xa2a	; 0xa2a <UART_RECEIVE>
 560:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <input_id>
	UART_SEND(input_id);        // Send the received ID back via UART for confirmation
 564:	0e 94 19 05 	call	0xa32	; 0xa32 <UART_SEND>
	flag_enter = 0;            // Reset the entry flag
 568:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>

	if (State == ENTER)
 56c:	c1 30       	cpi	r28, 0x01	; 1
 56e:	f1 f4       	brne	.+60     	; 0x5ac <GetData+0x54>
 570:	19 c0       	rjmp	.+50     	; 0x5a4 <GetData+0x4c>
	{
		// Check if the input ID matches any stored IDs and is not already inside
		for (u8 i = 0; i < 3; i++)
		{
			if ((input_id == EEPROM_READ(i)) && (input_id != driverIsin[i]))
 572:	8c 2f       	mov	r24, r28
 574:	0e 94 8b 01 	call	0x316	; 0x316 <EEPROM_READ>
 578:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <input_id>
 57c:	89 13       	cpse	r24, r25
 57e:	10 c0       	rjmp	.+32     	; 0x5a0 <GetData+0x48>
 580:	2c 2f       	mov	r18, r28
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	f9 01       	movw	r30, r18
 586:	ea 53       	subi	r30, 0x3A	; 58
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	80 81       	ld	r24, Z
 58c:	98 17       	cp	r25, r24
 58e:	41 f0       	breq	.+16     	; 0x5a0 <GetData+0x48>
			{
				driverIsin[i] = input_id; // Store the ID of the driver in the slot
 590:	f9 01       	movw	r30, r18
 592:	ea 53       	subi	r30, 0x3A	; 58
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	90 83       	st	Z, r25
				flag_enter = 1;          // Set the entry flag to indicate success
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
				break;
 59e:	3c c0       	rjmp	.+120    	; 0x618 <GetData+0xc0>
	flag_enter = 0;            // Reset the entry flag

	if (State == ENTER)
	{
		// Check if the input ID matches any stored IDs and is not already inside
		for (u8 i = 0; i < 3; i++)
 5a0:	cf 5f       	subi	r28, 0xFF	; 255
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <GetData+0x4e>
 5a4:	c0 e0       	ldi	r28, 0x00	; 0
 5a6:	c3 30       	cpi	r28, 0x03	; 3
 5a8:	20 f3       	brcs	.-56     	; 0x572 <GetData+0x1a>
 5aa:	36 c0       	rjmp	.+108    	; 0x618 <GetData+0xc0>
				flag_enter = 1;          // Set the entry flag to indicate success
				break;
			}
		}
	}
	else if (State == EXIT)
 5ac:	cc 23       	and	r28, r28
 5ae:	a9 f0       	breq	.+42     	; 0x5da <GetData+0x82>
 5b0:	18 c0       	rjmp	.+48     	; 0x5e2 <GetData+0x8a>
	{
		// Check if the input ID matches a driver ID inside
		for (u8 i = 0; i < 3; i++)
		{
			if (input_id == driverIsin[i])
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	f9 01       	movw	r30, r18
 5b8:	ea 53       	subi	r30, 0x3A	; 58
 5ba:	ff 4f       	sbci	r31, 0xFF	; 255
 5bc:	40 81       	ld	r20, Z
 5be:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <input_id>
 5c2:	49 13       	cpse	r20, r25
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <GetData+0x7e>
			{
				flag_enter = 1;          // Set the entry flag to indicate success
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
				driverIsin[i] = 0;       // Clear the ID from the slot
 5cc:	f9 01       	movw	r30, r18
 5ce:	ea 53       	subi	r30, 0x3A	; 58
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	10 82       	st	Z, r1
				break;
 5d4:	21 c0       	rjmp	.+66     	; 0x618 <GetData+0xc0>
		}
	}
	else if (State == EXIT)
	{
		// Check if the input ID matches a driver ID inside
		for (u8 i = 0; i < 3; i++)
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <GetData+0x84>
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	83 30       	cpi	r24, 0x03	; 3
 5de:	48 f3       	brcs	.-46     	; 0x5b2 <GetData+0x5a>
 5e0:	1b c0       	rjmp	.+54     	; 0x618 <GetData+0xc0>
				driverIsin[i] = 0;       // Clear the ID from the slot
				break;
			}
		}
	}
	else if (State == X_E)
 5e2:	c2 30       	cpi	r28, 0x02	; 2
 5e4:	c9 f4       	brne	.+50     	; 0x618 <GetData+0xc0>
	{
		// Display available slots and instructions on the LCD
		LCD_Clear();
 5e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Clear>
		LCD_String(" available: ");
 5ea:	81 e6       	ldi	r24, 0x61	; 97
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>
		LCD_printNumber(num_slot);
 5f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_printNumber>
		GOTOXY(1, 0);
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 5f 02 	call	0x4be	; 0x4be <GOTOXY>
		LCD_String("N->Enter.X->Exit");
 604:	8e e6       	ldi	r24, 0x6E	; 110
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>

		// Receive user choice (N for Enter, X for Exit)
		uart_data = UART_RECEIVE();
 60c:	0e 94 15 05 	call	0xa2a	; 0xa2a <UART_RECEIVE>
 610:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <uart_data>
		UART_SEND(uart_data);
 614:	0e 94 19 05 	call	0xa32	; 0xa32 <UART_SEND>
	}
}
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <G_init>:

void G_init()
{
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
	// Configure LCD
	DIO_SetPortDirection(Data_Port, Port_output);
 622:	6f ef       	ldi	r22, 0xFF	; 255
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_SetPortDirection>
	DIO_SetPinDirection(CTRL_PORT, RS_Pin, output);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	DIO_SetPinDirection(CTRL_PORT, RW_Pin, output);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	DIO_SetPinDirection(CTRL_PORT, Enable_Pin, output);
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	62 e0       	ldi	r22, 0x02	; 2
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	LCD_Init();
 648:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Init>

	/* EEPROM on port C pin 0 & pin 1 */
	// Initialize I2C for EEPROM communication
	I2C_VoidInitMaster(0);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 ae 01 	call	0x35c	; 0x35c <I2C_VoidInitMaster>

	/* Two pins for the red LED and the green LED */
	// Configure the green LED as an output (Active High)
	DIO_SetPinDirection(Port_D, Pin_6, output);
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	66 e0       	ldi	r22, 0x06	; 6
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	// Configure the red LED as an output (Active High)
	DIO_SetPinDirection(Port_D, Pin_7, output);
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	67 e0       	ldi	r22, 0x07	; 7
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>

	/* Pins for the PIR Sensor */
	// Configure PIR Sensor pins as inputs
	DIO_SetPinDirection(Port_D, Pin_2, input);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	62 e0       	ldi	r22, 0x02	; 2
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	DIO_SetPinDirection(Port_D, Pin_3, input);
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	63 e0       	ldi	r22, 0x03	; 3
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>

	/* Two Servo motors */
	// Initialize Timer1 for Servo control (you may have custom functions for this)
	SERVO_TIMER1_mode14_Init();
 67a:	0e 94 9c 04 	call	0x938	; 0x938 <SERVO_TIMER1_mode14_Init>
	SERVO_2_TIMER1_mode14_Init();
 67e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <SERVO_2_TIMER1_mode14_Init>

	/* SPI Initialization */
	SPI_INIT_MASTER();
 682:	0e 94 62 04 	call	0x8c4	; 0x8c4 <SPI_INIT_MASTER>

	// Configure the motor for entering the system
	DIO_SetPinDirection(Port_D, Pin_4, output);
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	64 e0       	ldi	r22, 0x04	; 4
 68a:	83 e0       	ldi	r24, 0x03	; 3
 68c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	// Configure the motor for exiting the system
	DIO_SetPinDirection(Port_D, Pin_5, output);
 690:	41 e0       	ldi	r20, 0x01	; 1
 692:	65 e0       	ldi	r22, 0x05	; 5
 694:	83 e0       	ldi	r24, 0x03	; 3
 696:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>

	/* UART pins */
	// Configure RX pin as an input
	DIO_SetPinDirection(Port_D, Pin_0, input);
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	// Configure TX pin as an output
	DIO_SetPinDirection(Port_D, Pin_1, output);
 6a4:	41 e0       	ldi	r20, 0x01	; 1
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	83 e0       	ldi	r24, 0x03	; 3
 6aa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>

	// Initialize UART communication
	UART_INIT();
 6ae:	0e 94 06 05 	call	0xa0c	; 0xa0c <UART_INIT>


	// Display "Admin" on the LCD
	LCD_String("Admin");
 6b2:	8f e7       	ldi	r24, 0x7F	; 127
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>
	GOTOXY(1, 0);
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 5f 02 	call	0x4be	; 0x4be <GOTOXY>
	LCD_String("Enter IDS : ");
 6c2:	85 e8       	ldi	r24, 0x85	; 133
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>

	// Receive and store admin-entered IDs
	for (u8 i = 0; i < 3; i++)
 6ca:	10 e0       	ldi	r17, 0x00	; 0
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <G_init+0xd4>
	{
		D_ID[i] = UART_RECEIVE();
 6ce:	c1 2f       	mov	r28, r17
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
 6d2:	0e 94 15 05 	call	0xa2a	; 0xa2a <UART_RECEIVE>
 6d6:	c3 53       	subi	r28, 0x33	; 51
 6d8:	df 4f       	sbci	r29, 0xFF	; 255
 6da:	88 83       	st	Y, r24
		UART_SEND(D_ID[i]);
 6dc:	0e 94 19 05 	call	0xa32	; 0xa32 <UART_SEND>
		LCD_Send_Data(D_ID[i]);
 6e0:	88 81       	ld	r24, Y
 6e2:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Send_Data>
		EEPROM_Write(i, D_ID[i]);
 6e6:	68 81       	ld	r22, Y
 6e8:	81 2f       	mov	r24, r17
 6ea:	0e 94 76 01 	call	0x2ec	; 0x2ec <EEPROM_Write>
	LCD_String("Admin");
	GOTOXY(1, 0);
	LCD_String("Enter IDS : ");

	// Receive and store admin-entered IDs
	for (u8 i = 0; i < 3; i++)
 6ee:	1f 5f       	subi	r17, 0xFF	; 255
 6f0:	13 30       	cpi	r17, 0x03	; 3
 6f2:	68 f3       	brcs	.-38     	; 0x6ce <G_init+0xb2>
		LCD_Send_Data(D_ID[i]);
		EEPROM_Write(i, D_ID[i]);
	}

	// Clear the LCD
	LCD_Clear();
 6f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Clear>
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	08 95       	ret

00000700 <WrongID>:


void WrongID()
{
	// Display "INVALIDE ID" on the LCD
	LCD_Clear();
 700:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Clear>
	LCD_String("INVALIDE ID.");
 704:	82 e9       	ldi	r24, 0x92	; 146
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>

	// Turn on the Red LED (Indicating an invalid ID)
	DIO_SetPinValue(Port_D, Pin_7, 1);
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	67 e0       	ldi	r22, 0x07	; 7
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>

	GOTOXY(1, 0);
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 5f 02 	call	0x4be	; 0x4be <GOTOXY>
	LCD_String("Available: ");
 71e:	8f e9       	ldi	r24, 0x9F	; 159
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>
	LCD_printNumber(num_slot);
 726:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_printNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 730:	2f ef       	ldi	r18, 0xFF	; 255
 732:	80 e7       	ldi	r24, 0x70	; 112
 734:	92 e0       	ldi	r25, 0x02	; 2
 736:	21 50       	subi	r18, 0x01	; 1
 738:	80 40       	sbci	r24, 0x00	; 0
 73a:	90 40       	sbci	r25, 0x00	; 0
 73c:	e1 f7       	brne	.-8      	; 0x736 <WrongID+0x36>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <WrongID+0x40>
 740:	00 00       	nop

	// Delay for a short time to show the message
	_delay_ms(100);

	// Turn off the Red LED
	DIO_SetPinValue(Port_D, Pin_7, 0);
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	67 e0       	ldi	r22, 0x07	; 7
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 74c:	08 95       	ret

0000074e <RightID>:
}

void RightID(u8 State)
{
 74e:	cf 93       	push	r28
 750:	c8 2f       	mov	r28, r24
	
	// Display "Right ID @ HH:MM:SS" on the LCD
	LCD_Clear();
 752:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Clear>
	LCD_String("Right ID @");
 756:	8b ea       	ldi	r24, 0xAB	; 171
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>

	// Turn on the Green LED (Indicating a valid ID)
	DIO_SetPinValue(Port_D, Pin_6, 1);
 75e:	41 e0       	ldi	r20, 0x01	; 1
 760:	66 e0       	ldi	r22, 0x06	; 6
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>

	if (State == EXIT)
 768:	c1 11       	cpse	r28, r1
 76a:	27 c0       	rjmp	.+78     	; 0x7ba <RightID+0x6c>
	{
		num_slot++;
 76c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 770:	8f 5f       	subi	r24, 0xFF	; 255
 772:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		// Open the exit door (you may have custom functions for this)
		SERVO_2_Set_Angle(90);
 776:	8a e5       	ldi	r24, 0x5A	; 90
 778:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SERVO_2_Set_Angle>
 77c:	2f ef       	ldi	r18, 0xFF	; 255
 77e:	80 e7       	ldi	r24, 0x70	; 112
 780:	92 e0       	ldi	r25, 0x02	; 2
 782:	21 50       	subi	r18, 0x01	; 1
 784:	80 40       	sbci	r24, 0x00	; 0
 786:	90 40       	sbci	r25, 0x00	; 0
 788:	e1 f7       	brne	.-8      	; 0x782 <RightID+0x34>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <RightID+0x3e>
 78c:	00 00       	nop
		_delay_ms(100);

		// Wait for the PIR sensor to detect the car leaving
		while (DIO_GetPinValue(Port_D, Pin_3) == 0);
 78e:	63 e0       	ldi	r22, 0x03	; 3
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	0e 94 29 01 	call	0x252	; 0x252 <DIO_GetPinValue>
 796:	88 23       	and	r24, r24
 798:	d1 f3       	breq	.-12     	; 0x78e <RightID+0x40>

		// Turn off the Green LED
		DIO_SetPinValue(Port_D, Pin_6, 0);
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	66 e0       	ldi	r22, 0x06	; 6
 79e:	83 e0       	ldi	r24, 0x03	; 3
 7a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>

		// Close the exit door (you may have custom functions for this)
		SERVO_2_Set_Angle(0);
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SERVO_2_Set_Angle>

		// Send the exit signal to the slave via SPI
		SPI_TR_RC('x');
 7aa:	88 e7       	ldi	r24, 0x78	; 120
 7ac:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_TR_RC>
		// Send the user's ID to the slave via SPI
		SPI_TR_RC(input_id);
 7b0:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <input_id>
 7b4:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_TR_RC>
 7b8:	28 c0       	rjmp	.+80     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	}
	else if (State == ENTER)
 7ba:	c1 30       	cpi	r28, 0x01	; 1
 7bc:	31 f5       	brne	.+76     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
		num_slot--;
 7be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7c2:	81 50       	subi	r24, 0x01	; 1
 7c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		// Open the entrance door (you may have custom functions for this)
		SERVO_Set_Angle(90);
 7c8:	8a e5       	ldi	r24, 0x5A	; 90
 7ca:	0e 94 c0 04 	call	0x980	; 0x980 <SERVO_Set_Angle>
 7ce:	2f ef       	ldi	r18, 0xFF	; 255
 7d0:	80 e7       	ldi	r24, 0x70	; 112
 7d2:	92 e0       	ldi	r25, 0x02	; 2
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	80 40       	sbci	r24, 0x00	; 0
 7d8:	90 40       	sbci	r25, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <RightID+0x86>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <RightID+0x90>
 7de:	00 00       	nop
		_delay_ms(100);

		// Wait for the PIR sensor to detect the car entering
		while (DIO_GetPinValue(Port_D, Pin_2) == 0);
 7e0:	62 e0       	ldi	r22, 0x02	; 2
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_GetPinValue>
 7e8:	88 23       	and	r24, r24
 7ea:	d1 f3       	breq	.-12     	; 0x7e0 <RightID+0x92>

		// Turn off the Green LED
		DIO_SetPinValue(Port_D, Pin_6, 0);
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	66 e0       	ldi	r22, 0x06	; 6
 7f0:	83 e0       	ldi	r24, 0x03	; 3
 7f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>

		// Close the entrance door (you may have custom functions for this)
		SERVO_Set_Angle(0);
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	0e 94 c0 04 	call	0x980	; 0x980 <SERVO_Set_Angle>

		// Send the enter signal to the slave via SPI
		SPI_TR_RC('n');
 7fc:	8e e6       	ldi	r24, 0x6E	; 110
 7fe:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_TR_RC>
		// Send the user's ID to the slave via SPI
		SPI_TR_RC(input_id);
 802:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <input_id>
 806:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_TR_RC>
	}

	GOTOXY(1, 0);
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	0e 94 5f 02 	call	0x4be	; 0x4be <GOTOXY>
	LCD_String("Available: ");
 812:	8f e9       	ldi	r24, 0x9F	; 159
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>
	LCD_printNumber(num_slot);
 81a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_printNumber>
 824:	2f ef       	ldi	r18, 0xFF	; 255
 826:	80 e7       	ldi	r24, 0x70	; 112
 828:	92 e0       	ldi	r25, 0x02	; 2
 82a:	21 50       	subi	r18, 0x01	; 1
 82c:	80 40       	sbci	r24, 0x00	; 0
 82e:	90 40       	sbci	r25, 0x00	; 0
 830:	e1 f7       	brne	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 832:	00 c0       	rjmp	.+0      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 834:	00 00       	nop
	// Delay for a short time to show the message
	_delay_ms(100);


	
}
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <main>:

int main(void)
{
	G_init();  // Initialize the system
 83a:	0e 94 0e 03 	call	0x61c	; 0x61c <G_init>

	while (1)
	{

		GetData(X_E);  // Receive user input and state (Enter/Exit) via UART
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	0e 94 ac 02 	call	0x558	; 0x558 <GetData>

		switch (uart_data)
 844:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <uart_data>
 848:	88 35       	cpi	r24, 0x58	; 88
 84a:	61 f1       	breq	.+88     	; 0x8a4 <__stack+0x45>
 84c:	18 f4       	brcc	.+6      	; 0x854 <main+0x1a>
 84e:	8e 34       	cpi	r24, 0x4E	; 78
 850:	31 f0       	breq	.+12     	; 0x85e <main+0x24>
 852:	f5 cf       	rjmp	.-22     	; 0x83e <main+0x4>
 854:	8e 36       	cpi	r24, 0x6E	; 110
 856:	19 f0       	breq	.+6      	; 0x85e <main+0x24>
 858:	88 37       	cpi	r24, 0x78	; 120
 85a:	21 f1       	breq	.+72     	; 0x8a4 <__stack+0x45>
 85c:	f0 cf       	rjmp	.-32     	; 0x83e <main+0x4>
		{
			case 'n':
			case 'N':
			if (num_slot == 0)
 85e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 862:	81 11       	cpse	r24, r1
 864:	10 c0       	rjmp	.+32     	; 0x886 <__stack+0x27>
			{
				// Display "FULL, SORRY" if no available slots
				LCD_Clear();
 866:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Clear>
				LCD_String(" FULL, SORRY");
 86a:	86 eb       	ldi	r24, 0xB6	; 182
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_String>
 872:	2f ef       	ldi	r18, 0xFF	; 255
 874:	81 ee       	ldi	r24, 0xE1	; 225
 876:	94 e0       	ldi	r25, 0x04	; 4
 878:	21 50       	subi	r18, 0x01	; 1
 87a:	80 40       	sbci	r24, 0x00	; 0
 87c:	90 40       	sbci	r25, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
 882:	00 00       	nop
				_delay_ms(200);
				continue;
 884:	dc cf       	rjmp	.-72     	; 0x83e <main+0x4>
			}
			GetData(ENTER);
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	0e 94 ac 02 	call	0x558	; 0x558 <GetData>
			if (flag_enter == 1)
 88c:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
			{
				RightID(ENTER);
 894:	0e 94 a7 03 	call	0x74e	; 0x74e <RightID>
 898:	d2 cf       	rjmp	.-92     	; 0x83e <main+0x4>
				if (num_slot > 0)
				continue;
			}
			else if (flag_enter == 0)
 89a:	81 11       	cpse	r24, r1
 89c:	d0 cf       	rjmp	.-96     	; 0x83e <main+0x4>
			{
				WrongID();
 89e:	0e 94 80 03 	call	0x700	; 0x700 <WrongID>
 8a2:	cd cf       	rjmp	.-102    	; 0x83e <main+0x4>
				continue;
			}
			break;
			case 'x':
			case 'X':
			GetData(EXIT);
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 ac 02 	call	0x558	; 0x558 <GetData>
			if (flag_enter == 1)
 8aa:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	21 f4       	brne	.+8      	; 0x8ba <__stack+0x5b>
			{
				RightID(EXIT);
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	0e 94 a7 03 	call	0x74e	; 0x74e <RightID>
 8b8:	c2 cf       	rjmp	.-124    	; 0x83e <main+0x4>
				if (num_slot > 0)
				continue;
			}
			else if (flag_enter == 0)
 8ba:	81 11       	cpse	r24, r1
 8bc:	c0 cf       	rjmp	.-128    	; 0x83e <main+0x4>
			{
				WrongID();
 8be:	0e 94 80 03 	call	0x700	; 0x700 <WrongID>
 8c2:	bd cf       	rjmp	.-134    	; 0x83e <main+0x4>

000008c4 <SPI_INIT_MASTER>:

	// Sample at leading edge >> sample= receive
	CLR_BIT(SPCR, SPCR_CPHA_PIN);

	// SPI enable
	SET_BIT(SPCR, SPCR_SPE_PIN);
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	65 e0       	ldi	r22, 0x05	; 5
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	66 e0       	ldi	r22, 0x06	; 6
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	67 e0       	ldi	r22, 0x07	; 7
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
 8e2:	41 e0       	ldi	r20, 0x01	; 1
 8e4:	64 e0       	ldi	r22, 0x04	; 4
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	64 e0       	ldi	r22, 0x04	; 4
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 8f6:	8d b1       	in	r24, 0x0d	; 13
 8f8:	8f 77       	andi	r24, 0x7F	; 127
 8fa:	8d b9       	out	0x0d, r24	; 13
 8fc:	8d b1       	in	r24, 0x0d	; 13
 8fe:	80 62       	ori	r24, 0x20	; 32
 900:	8d b9       	out	0x0d, r24	; 13
 902:	8d b1       	in	r24, 0x0d	; 13
 904:	80 61       	ori	r24, 0x10	; 16
 906:	8d b9       	out	0x0d, r24	; 13
 908:	8d b1       	in	r24, 0x0d	; 13
 90a:	87 7f       	andi	r24, 0xF7	; 247
 90c:	8d b9       	out	0x0d, r24	; 13
 90e:	8d b1       	in	r24, 0x0d	; 13
 910:	8b 7f       	andi	r24, 0xFB	; 251
 912:	8d b9       	out	0x0d, r24	; 13
 914:	8d b1       	in	r24, 0x0d	; 13
 916:	81 60       	ori	r24, 0x01	; 1
 918:	8d b9       	out	0x0d, r24	; 13
 91a:	8d b1       	in	r24, 0x0d	; 13
 91c:	8d 7f       	andi	r24, 0xFD	; 253
 91e:	8d b9       	out	0x0d, r24	; 13
 920:	8e b1       	in	r24, 0x0e	; 14
 922:	8e 7f       	andi	r24, 0xFE	; 254
 924:	8e b9       	out	0x0e, r24	; 14
 926:	8d b1       	in	r24, 0x0d	; 13
 928:	80 64       	ori	r24, 0x40	; 64
 92a:	8d b9       	out	0x0d, r24	; 13
 92c:	08 95       	ret

0000092e <SPI_TR_RC>:
}
u8 SPI_TR_RC(u8 data)
{
	// send data
	SPDR = data;
 92e:	8f b9       	out	0x0f, r24	; 15
	// wait till data is sent
	while (GET_BIT(SPSR, SPSR_SPIF) == 0)
 930:	77 9b       	sbis	0x0e, 7	; 14
 932:	fe cf       	rjmp	.-4      	; 0x930 <SPI_TR_RC+0x2>
		;
	// return received data
	return SPDR;
 934:	8f b1       	in	r24, 0x0f	; 15
 936:	08 95       	ret

00000938 <SERVO_TIMER1_mode14_Init>:
 select OC1A
 * TO COMPARE MATCH
 fast pwm - mode 14
 * AND NON INVERTED PWM
 */
	CLR_BIT(TCCR1A, COM1A0);
 938:	8f b5       	in	r24, 0x2f	; 47
 93a:	8f 7b       	andi	r24, 0xBF	; 191
 93c:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A, COM1A1);
 93e:	8f b5       	in	r24, 0x2f	; 47
 940:	80 68       	ori	r24, 0x80	; 128
 942:	8f bd       	out	0x2f, r24	; 47

	/*select wave generation mode 14*/
	CLR_BIT(TCCR1A, WGM10);
 944:	8f b5       	in	r24, 0x2f	; 47
 946:	8e 7f       	andi	r24, 0xFE	; 254
 948:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A, WGM11);
 94a:	8f b5       	in	r24, 0x2f	; 47
 94c:	82 60       	ori	r24, 0x02	; 2
 94e:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B, WGM13);
 950:	8e b5       	in	r24, 0x2e	; 46
 952:	80 61       	ori	r24, 0x10	; 16
 954:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, WGM12);
 956:	8e b5       	in	r24, 0x2e	; 46
 958:	88 60       	ori	r24, 0x08	; 8
 95a:	8e bd       	out	0x2e, r24	; 46

	/*PRESCALAR 8*/
	CLR_BIT(TCCR1B, CS10);
 95c:	8e b5       	in	r24, 0x2e	; 46
 95e:	8e 7f       	andi	r24, 0xFE	; 254
 960:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, CS11);
 962:	8e b5       	in	r24, 0x2e	; 46
 964:	82 60       	ori	r24, 0x02	; 2
 966:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B, CS12);
 968:	8e b5       	in	r24, 0x2e	; 46
 96a:	8b 7f       	andi	r24, 0xFB	; 251
 96c:	8e bd       	out	0x2e, r24	; 46
	/*COUNTS TOP*/ // ever count takes 1 micro seconds
	//>> now it calculates 20000 micro second as we need in the servo
	ICR1 = 19999;
 96e:	8f e1       	ldi	r24, 0x1F	; 31
 970:	9e e4       	ldi	r25, 0x4E	; 78
 972:	97 bd       	out	0x27, r25	; 39
 974:	86 bd       	out	0x26, r24	; 38
	// now initialize the angle
	// zero at 1 milli -- 1000 micro -- means 999 in proteus its -90
	OCR1A = 999; // now we are at angle zero
 976:	87 ee       	ldi	r24, 0xE7	; 231
 978:	93 e0       	ldi	r25, 0x03	; 3
 97a:	9b bd       	out	0x2b, r25	; 43
 97c:	8a bd       	out	0x2a, r24	; 42
 97e:	08 95       	ret

00000980 <SERVO_Set_Angle>:
}
void SERVO_Set_Angle(u8 angle)
{
	OCR1A = ((angle * 1000UL) / 180) + 999;
 980:	28 2f       	mov	r18, r24
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	a8 ee       	ldi	r26, 0xE8	; 232
 986:	b3 e0       	ldi	r27, 0x03	; 3
 988:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__umulhisi3>
 98c:	24 eb       	ldi	r18, 0xB4	; 180
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__udivmodsi4>
 998:	29 51       	subi	r18, 0x19	; 25
 99a:	3c 4f       	sbci	r19, 0xFC	; 252
 99c:	3b bd       	out	0x2b, r19	; 43
 99e:	2a bd       	out	0x2a, r18	; 42
 9a0:	08 95       	ret

000009a2 <SERVO_2_TIMER1_mode14_Init>:
 select OC1A
 * TO COMPARE MATCH
 fast pwm - mode 14
 * AND NON INVERTED PWM
 */
	CLR_BIT(TCCR1A, COM1B0);
 9a2:	8f b5       	in	r24, 0x2f	; 47
 9a4:	8f 7e       	andi	r24, 0xEF	; 239
 9a6:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A, COM1B1);
 9a8:	8f b5       	in	r24, 0x2f	; 47
 9aa:	80 62       	ori	r24, 0x20	; 32
 9ac:	8f bd       	out	0x2f, r24	; 47

	/*select wave generation mode 14*/
	CLR_BIT(TCCR1A, WGM10);
 9ae:	8f b5       	in	r24, 0x2f	; 47
 9b0:	8e 7f       	andi	r24, 0xFE	; 254
 9b2:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A, WGM11);
 9b4:	8f b5       	in	r24, 0x2f	; 47
 9b6:	82 60       	ori	r24, 0x02	; 2
 9b8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B, WGM13);
 9ba:	8e b5       	in	r24, 0x2e	; 46
 9bc:	80 61       	ori	r24, 0x10	; 16
 9be:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, WGM12);
 9c0:	8e b5       	in	r24, 0x2e	; 46
 9c2:	88 60       	ori	r24, 0x08	; 8
 9c4:	8e bd       	out	0x2e, r24	; 46

	/*PRESCALAR 8*/
	CLR_BIT(TCCR1B, CS10);
 9c6:	8e b5       	in	r24, 0x2e	; 46
 9c8:	8e 7f       	andi	r24, 0xFE	; 254
 9ca:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, CS11);
 9cc:	8e b5       	in	r24, 0x2e	; 46
 9ce:	82 60       	ori	r24, 0x02	; 2
 9d0:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B, CS12);
 9d2:	8e b5       	in	r24, 0x2e	; 46
 9d4:	8b 7f       	andi	r24, 0xFB	; 251
 9d6:	8e bd       	out	0x2e, r24	; 46
	/*COUNTS TOP*/ // ever count takes 1 micro seconds
	//>> now it calculates 20000 micro second as we need in the servo
	ICR1 = 19999;
 9d8:	8f e1       	ldi	r24, 0x1F	; 31
 9da:	9e e4       	ldi	r25, 0x4E	; 78
 9dc:	97 bd       	out	0x27, r25	; 39
 9de:	86 bd       	out	0x26, r24	; 38
	// now initialize the angle
	// zero at 1 milli -- 1000 micro -- means 999 in proteus its -90
	OCR1B = 999; // now we are at angle zero
 9e0:	87 ee       	ldi	r24, 0xE7	; 231
 9e2:	93 e0       	ldi	r25, 0x03	; 3
 9e4:	99 bd       	out	0x29, r25	; 41
 9e6:	88 bd       	out	0x28, r24	; 40
 9e8:	08 95       	ret

000009ea <SERVO_2_Set_Angle>:
}
void SERVO_2_Set_Angle(u8 angle)
{
	OCR1B = ((angle * 1000UL) / 180) + 999;
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	a8 ee       	ldi	r26, 0xE8	; 232
 9f0:	b3 e0       	ldi	r27, 0x03	; 3
 9f2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__umulhisi3>
 9f6:	24 eb       	ldi	r18, 0xB4	; 180
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	40 e0       	ldi	r20, 0x00	; 0
 9fc:	50 e0       	ldi	r21, 0x00	; 0
 9fe:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__udivmodsi4>
 a02:	29 51       	subi	r18, 0x19	; 25
 a04:	3c 4f       	sbci	r19, 0xFC	; 252
 a06:	39 bd       	out	0x29, r19	; 41
 a08:	28 bd       	out	0x28, r18	; 40
 a0a:	08 95       	ret

00000a0c <UART_INIT>:
	}

	// enable int
	SET_BIT(UCSRB, UCSRB_RXCIE);
	return local;
}
 a0c:	8a b1       	in	r24, 0x0a	; 10
 a0e:	8b 7f       	andi	r24, 0xFB	; 251
 a10:	8a b9       	out	0x0a, r24	; 10
 a12:	86 e0       	ldi	r24, 0x06	; 6
 a14:	80 bd       	out	0x20, r24	; 32
 a16:	10 bc       	out	0x20, r1	; 32
 a18:	83 e3       	ldi	r24, 0x33	; 51
 a1a:	89 b9       	out	0x09, r24	; 9
 a1c:	8a b1       	in	r24, 0x0a	; 10
 a1e:	80 61       	ori	r24, 0x10	; 16
 a20:	8a b9       	out	0x0a, r24	; 10
 a22:	8a b1       	in	r24, 0x0a	; 10
 a24:	88 60       	ori	r24, 0x08	; 8
 a26:	8a b9       	out	0x0a, r24	; 10
 a28:	08 95       	ret

00000a2a <UART_RECEIVE>:
 a2a:	5f 9b       	sbis	0x0b, 7	; 11
 a2c:	fe cf       	rjmp	.-4      	; 0xa2a <UART_RECEIVE>
 a2e:	8c b1       	in	r24, 0x0c	; 12
 a30:	08 95       	ret

00000a32 <UART_SEND>:
	// 	;
	// // clear flag by writing one
	// SET_BIT(UCSRA, UCSRA_TXC);
	
	// Wait for data register to be empty
	while (!(UCSRA & (1 << UCSRA_UDRE)))
 a32:	5d 9b       	sbis	0x0b, 5	; 11
 a34:	fe cf       	rjmp	.-4      	; 0xa32 <UART_SEND>
		;

	// Write character to UART
	UDR = data;
 a36:	8c b9       	out	0x0c, r24	; 12
 a38:	08 95       	ret

00000a3a <__udivmodsi4>:
 a3a:	a1 e2       	ldi	r26, 0x21	; 33
 a3c:	1a 2e       	mov	r1, r26
 a3e:	aa 1b       	sub	r26, r26
 a40:	bb 1b       	sub	r27, r27
 a42:	fd 01       	movw	r30, r26
 a44:	0d c0       	rjmp	.+26     	; 0xa60 <__udivmodsi4_ep>

00000a46 <__udivmodsi4_loop>:
 a46:	aa 1f       	adc	r26, r26
 a48:	bb 1f       	adc	r27, r27
 a4a:	ee 1f       	adc	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	a2 17       	cp	r26, r18
 a50:	b3 07       	cpc	r27, r19
 a52:	e4 07       	cpc	r30, r20
 a54:	f5 07       	cpc	r31, r21
 a56:	20 f0       	brcs	.+8      	; 0xa60 <__udivmodsi4_ep>
 a58:	a2 1b       	sub	r26, r18
 a5a:	b3 0b       	sbc	r27, r19
 a5c:	e4 0b       	sbc	r30, r20
 a5e:	f5 0b       	sbc	r31, r21

00000a60 <__udivmodsi4_ep>:
 a60:	66 1f       	adc	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	1a 94       	dec	r1
 a6a:	69 f7       	brne	.-38     	; 0xa46 <__udivmodsi4_loop>
 a6c:	60 95       	com	r22
 a6e:	70 95       	com	r23
 a70:	80 95       	com	r24
 a72:	90 95       	com	r25
 a74:	9b 01       	movw	r18, r22
 a76:	ac 01       	movw	r20, r24
 a78:	bd 01       	movw	r22, r26
 a7a:	cf 01       	movw	r24, r30
 a7c:	08 95       	ret

00000a7e <__umulhisi3>:
 a7e:	a2 9f       	mul	r26, r18
 a80:	b0 01       	movw	r22, r0
 a82:	b3 9f       	mul	r27, r19
 a84:	c0 01       	movw	r24, r0
 a86:	a3 9f       	mul	r26, r19
 a88:	70 0d       	add	r23, r0
 a8a:	81 1d       	adc	r24, r1
 a8c:	11 24       	eor	r1, r1
 a8e:	91 1d       	adc	r25, r1
 a90:	b2 9f       	mul	r27, r18
 a92:	70 0d       	add	r23, r0
 a94:	81 1d       	adc	r24, r1
 a96:	11 24       	eor	r1, r1
 a98:	91 1d       	adc	r25, r1
 a9a:	08 95       	ret

00000a9c <itoa>:
 a9c:	45 32       	cpi	r20, 0x25	; 37
 a9e:	51 05       	cpc	r21, r1
 aa0:	20 f4       	brcc	.+8      	; 0xaaa <itoa+0xe>
 aa2:	42 30       	cpi	r20, 0x02	; 2
 aa4:	10 f0       	brcs	.+4      	; 0xaaa <itoa+0xe>
 aa6:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__itoa_ncheck>
 aaa:	fb 01       	movw	r30, r22
 aac:	10 82       	st	Z, r1
 aae:	cb 01       	movw	r24, r22
 ab0:	08 95       	ret

00000ab2 <__itoa_ncheck>:
 ab2:	bb 27       	eor	r27, r27
 ab4:	4a 30       	cpi	r20, 0x0A	; 10
 ab6:	31 f4       	brne	.+12     	; 0xac4 <__itoa_ncheck+0x12>
 ab8:	99 23       	and	r25, r25
 aba:	22 f4       	brpl	.+8      	; 0xac4 <__itoa_ncheck+0x12>
 abc:	bd e2       	ldi	r27, 0x2D	; 45
 abe:	90 95       	com	r25
 ac0:	81 95       	neg	r24
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	0c 94 65 05 	jmp	0xaca	; 0xaca <__utoa_common>

00000ac8 <__utoa_ncheck>:
 ac8:	bb 27       	eor	r27, r27

00000aca <__utoa_common>:
 aca:	fb 01       	movw	r30, r22
 acc:	55 27       	eor	r21, r21
 ace:	aa 27       	eor	r26, r26
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	aa 1f       	adc	r26, r26
 ad6:	a4 17       	cp	r26, r20
 ad8:	10 f0       	brcs	.+4      	; 0xade <__utoa_common+0x14>
 ada:	a4 1b       	sub	r26, r20
 adc:	83 95       	inc	r24
 ade:	50 51       	subi	r21, 0x10	; 16
 ae0:	b9 f7       	brne	.-18     	; 0xad0 <__utoa_common+0x6>
 ae2:	a0 5d       	subi	r26, 0xD0	; 208
 ae4:	aa 33       	cpi	r26, 0x3A	; 58
 ae6:	08 f0       	brcs	.+2      	; 0xaea <__utoa_common+0x20>
 ae8:	a9 5d       	subi	r26, 0xD9	; 217
 aea:	a1 93       	st	Z+, r26
 aec:	00 97       	sbiw	r24, 0x00	; 0
 aee:	79 f7       	brne	.-34     	; 0xace <__utoa_common+0x4>
 af0:	b1 11       	cpse	r27, r1
 af2:	b1 93       	st	Z+, r27
 af4:	11 92       	st	Z+, r1
 af6:	cb 01       	movw	r24, r22
 af8:	0c 94 7e 05 	jmp	0xafc	; 0xafc <strrev>

00000afc <strrev>:
 afc:	dc 01       	movw	r26, r24
 afe:	fc 01       	movw	r30, r24
 b00:	67 2f       	mov	r22, r23
 b02:	71 91       	ld	r23, Z+
 b04:	77 23       	and	r23, r23
 b06:	e1 f7       	brne	.-8      	; 0xb00 <strrev+0x4>
 b08:	32 97       	sbiw	r30, 0x02	; 2
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <strrev+0x18>
 b0c:	7c 91       	ld	r23, X
 b0e:	6d 93       	st	X+, r22
 b10:	70 83       	st	Z, r23
 b12:	62 91       	ld	r22, -Z
 b14:	ae 17       	cp	r26, r30
 b16:	bf 07       	cpc	r27, r31
 b18:	c8 f3       	brcs	.-14     	; 0xb0c <strrev+0x10>
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
